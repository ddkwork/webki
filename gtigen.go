// Code generated by "goki generate"; DO NOT EDIT.

package webki

import (
	"io/fs"

	"goki.dev/gi/v2/gi"
	"goki.dev/glide/gidom"
	"goki.dev/goosi/events"
	"goki.dev/gti"
	"goki.dev/ki/v2"
	"goki.dev/ordmap"
	"golang.org/x/net/html"
)

// PageType is the [gti.Type] for [Page]
var PageType = gti.AddType(&gti.Type{
	Name:       "goki.dev/webki.Page",
	ShortName:  "glide.Page",
	IDName:     "page",
	Doc:        "Page represents one site page",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ContextBase", &gti.Field{Name: "ContextBase", Type: "goki.dev/glide/gidom.ContextBase", LocalType: "gidom.ContextBase", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Source", &gti.Field{Name: "Source", Type: "io/fs.FS", LocalType: "fs.FS", Doc: "Source is the filesystem in which the content is located.", Directives: gti.Directives{}, Tag: ""}},
		{"History", &gti.Field{Name: "History", Type: "[]string", LocalType: "[]string", Doc: "The history of URLs that have been visited. The oldest page is first.", Directives: gti.Directives{}, Tag: ""}},
		{"PgURL", &gti.Field{Name: "PgURL", Type: "string", LocalType: "string", Doc: "PgURL is the current page URL", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Frame", &gti.Field{Name: "Frame", Type: "goki.dev/gi/v2/gi.Frame", LocalType: "gi.Frame", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods:  ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
	Instance: &Page{},
})

// NewPage adds a new [Page] with the given name
// to the given parent. If the name is unspecified, it defaults
// to the ID (kebab-case) name of the type, plus the
// [ki.Ki.NumLifetimeChildren] of the given parent.
func NewPage(par ki.Ki, name ...string) *Page {
	return par.NewChild(PageType, name...).(*Page)
}

// KiType returns the [*gti.Type] of [Page]
func (t *Page) KiType() *gti.Type {
	return PageType
}

// New returns a new [*Page] value
func (t *Page) New() ki.Ki {
	return &Page{}
}

// SetContextBase sets the [Page.ContextBase]
func (t *Page) SetContextBase(v gidom.ContextBase) *Page {
	t.ContextBase = v
	return t
}

// SetSource sets the [Page.Source]:
// Source is the filesystem in which the content is located.
func (t *Page) SetSource(v fs.FS) *Page {
	t.Source = v
	return t
}

// SetHistory sets the [Page.History]:
// The history of URLs that have been visited. The oldest page is first.
func (t *Page) SetHistory(v []string) *Page {
	t.History = v
	return t
}

// SetPgUrl sets the [Page.PgURL]:
// PgURL is the current page URL
func (t *Page) SetPgUrl(v string) *Page {
	t.PgURL = v
	return t
}

// SetTooltip sets the [Page.Tooltip]
func (t *Page) SetTooltip(v string) *Page {
	t.Tooltip = v
	return t
}

// SetClass sets the [Page.Class]
func (t *Page) SetClass(v string) *Page {
	t.Class = v
	return t
}

// SetPriorityEvents sets the [Page.PriorityEvents]
func (t *Page) SetPriorityEvents(v []events.Types) *Page {
	t.PriorityEvents = v
	return t
}

// SetCustomContextMenu sets the [Page.CustomContextMenu]
func (t *Page) SetCustomContextMenu(v func(m *gi.Scene)) *Page {
	t.CustomContextMenu = v
	return t
}

// SetStackTop sets the [Page.StackTop]
func (t *Page) SetStackTop(v int) *Page {
	t.StackTop = v
	return t
}

// SetStripes sets the [Page.Stripes]
func (t *Page) SetStripes(v gi.Stripes) *Page {
	t.Stripes = v
	return t
}

// SetCurStyle sets the [Page.CurStyle]
func (t *Page) SetCurStyle(v string) *Page {
	t.CurStyle = v
	return t
}

// SetWidgetsForNodes sets the [Page.WidgetsForNodes]
func (t *Page) SetWidgetsForNodes(v map[*html.Node]gi.Widget) *Page {
	t.WidgetsForNodes = v
	return t
}
